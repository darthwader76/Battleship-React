{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","turn","handleTurn","bind","assertThisInitialized","document","title","setState","react_default","a","createElement","className","href","target","rel","App_Gameboard","rows","columns","player","Component","Ship","name","length","hits","Array","fill","getName","getLength","hit","position","Error","isSunk","every","Position","_this2","concat","ship","shot","onClick","React","Gameboard","_this3","board","map","availableShips","ships","selectedShip","rotate","slice","Math","floor","random","row","column","placeShip","splice","_unused","arguments","undefined","i","push","msg","allSunk","receiveAttack","err","alert","message","loop","_unused2","_this4","console","log","_","key","pos","j","App_Position","handleClick","htmlFor","type","id","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.56b67069.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      turn : true,\n    }\n    this.handleTurn = this.handleTurn.bind(this)\n  }\n  componentDidMount(){\n    document.title = \"Battleship\"\n  }\n  handleTurn() {\n    this.setState({\n      turn : !this.state.turn\n    })\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <a\n            className=\"ProjectReact-link\"\n            href=\"https://github.com/darthwader76/Battleship-React\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            PROJECT: BATTLESHIP\n          </a>\n        </header>\n        <Gameboard rows = {10} columns = {10} player = {true} handleTurn = {this.handleTurn} turn = {this.state.turn}/>\n        <Gameboard rows = {10} columns = {10} player = {false} handleTurn = {this.handleTurn} turn = {this.state.turn}/>\n      </div>\n    );\n  }\n}\n\nconst Ship = (name, length) => {\n  const hits = new Array(length).fill(false)\n  const getName = () => name;\n  const getLength = () => length;\n  const hit = (position) => {\n    if (position >= length || position < 0) {throw new Error(\"not a Vaild position\")}\n    else {hits[position] = true}\n  }\n  const isSunk = () => hits.every((position) => position);\n  return {getName, getLength, hit, isSunk}\n}\n\n\nclass Position extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n    }\n  }\n  render () {\n    return (\n      <button\n        className = {`${this.props.ship ? \"ship \" : \"\"}${this.props.shot ? \"shot\" : \"\"}`}\n        onClick = {this.props.onClick}>\n        {this.props.shot ? \"X\" : \"~\"}\n      </button>\n    );\n  }\n}\n\nclass Gameboard extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      board : new Array(props.rows || 10).fill(null).map(() =>\n        new Array(props.columns || 10).fill(null).map(() =>\n          {return {ship : null, position : null, shot : false}})),\n      availableShips : [Ship(\"Carrier\",5),Ship(\"Battleship\",4),Ship(\"Cruiser\",3),Ship(\"Submarine\",3),Ship(\"Destroyer\",2)]\n    }\n    this.ships = []\n    this.selectedShip = null\n    this.rotate = false;\n  }\n\n  componentDidMount(){\n    if (!this.props.player){\n      let availableShips = this.state.availableShips.slice();\n      while (availableShips.length > 0) {\n        try {\n          let selectedShip = Math.floor(Math.random()*availableShips.length)\n          let row = Math.floor(Math.random()*this.props.rows)\n          let column = Math.floor(Math.random()*this.props.columns)\n          this.placeShip(availableShips[selectedShip],row,column,Math.random() > .5)\n          availableShips.splice(selectedShip,1)\n        } catch {}\n      }\n      this.setState({availableShips : availableShips})\n    }\n  }\n\n  placeShip(ship, row, column, rotation = true) {\n    if (rotation){\n      if (this.state.board.length < row + ship.getLength()) { throw new Error(\"Ship is to large to be placed there\") }\n      for (let i = 0; i < ship.getLength(); i++){\n        if (this.state.board[row + i][column].ship != null) { throw new Error(\"Ships can not overlap\")}\n      }\n      let board = this.state.board.slice();\n      for (let i = 0; i < ship.getLength(); i++){\n        board[row + i][column].ship = ship;\n        board[row + i][column].position = i;\n      }\n      this.setState({board : board})\n      this.ships.push(ship)\n    } else {\n      if (this.state.board[row].length < column + ship.getLength()) { throw new Error(\"Ship is to large to be placed there\") }\n      for (let i = 0; i < ship.getLength(); i++){\n        if (this.state.board[row][column + i].ship != null) { throw new Error(\"Ships can not overlap\")}\n      }\n      let board = this.state.board.slice();\n      for (let i = 0; i < ship.getLength(); i++){\n        board[row][column + i].ship = ship;\n        board[row][column + i].position = i;\n      }\n      this.setState({board : board})\n      this.ships.push(ship)\n    }\n  }\n\n  receiveAttack(row, column) {\n    if (this.state.board[row][column].shot) { throw new Error(\"can not shoot the same cords 2x\")}\n    let board = this.state.board.slice();\n    board[row][column].shot = true;\n    this.setState({board : board})\n    if (this.state.board[row][column].ship != null) {\n      this.state.board[row][column].ship.hit(this.state.board[row][column].position)\n      if (this.state.board[row][column].ship.isSunk(this.state.board[row][column].ship)) {\n        this.setState({msg : `The ${this.state.board[row][column].ship.getName()} sunk`})\n        if(this.allSunk()){\n          this.setState({msg : `You ${this.props.player ? \"Lost\" : \"Won\"} the Game`})\n        }\n      }\n      return true\n    }\n    return false\n  }\n\n  allSunk() {return this.ships.every((ship) => ship.isSunk())}\n\n  handleClick(row,column) {\n    try{\n      if (this.selectedShip != null && this.props.player){\n        this.placeShip(this.state.availableShips[this.selectedShip],row,column,this.rotate)\n        let availableShips = this.state.availableShips.slice();\n        availableShips.splice(this.selectedShip,1)\n        this.setState({availableShips : availableShips})\n        this.selectedShip = null\n      } else if(this.state.availableShips.length === 0 && this.props.turn && !this.props.player){\n        this.receiveAttack(row,column)\n        this.props.handleTurn()\n      }\n    } catch(err){\n      alert(err.message)\n    }\n  }\n\n  componentDidUpdate(){\n    if(this.state.availableShips.length === 0 && !this.props.turn && this.props.player) {\n      let loop = true\n      while(loop){\n        let row = Math.floor(Math.random()*this.props.rows)\n        let column = Math.floor(Math.random()*this.props.columns)\n        try {\n          this.receiveAttack(row,column)\n          loop = false\n          this.props.handleTurn()\n        } catch {}\n      }\n    }\n  }\n\n  render() {\n    console.log(\"test\");\n    return (\n      <div className = {`gameBoard ${this.props.player ? \"player\":\"computer\"}`}>\n        <div className = \"board\">\n          <div className = \"numberRow\"> {this.state.board[0].map((_,i)=> <span key = {i} className = \"column\">{i}</span>)} </div>\n          {this.state.board.map((row,i) =>\n              <div key = {i} className = \"row\"> {i}: {row.map((pos,j) =>\n                <Position key = {j}\n                  ship = {pos.ship}\n                  position = {pos.position}\n                  shot = {pos.shot}\n                  onClick={() => this.handleClick(i,j)}/> ) }\n              </div>)}\n        </div>\n        {(this.state.availableShips.length > 0) &&\n          <ul className = \"availableShips\">\n            {this.state.availableShips.map((ship , i) =>\n            <li key = {i}>\n              <button onClick={() => this.selectedShip = i}>\n                {`${ship.getName()} : Size ${ship.getLength()}`}\n              </button>\n            </li>)}\n            <li>\n              <label htmlFor = \"rotate\"> Rotate </label>\n              <input type = \"checkbox\" id = \"rotate\" onClick={() => {\n                this.rotate = !this.rotate\n              }}/>\n            </li>\n          </ul>\n        }\n        {this.state.msg}\n      </div>\n\n    );\n  }\n  //return {placeShip, receiveAttack, allSunk}\n}\n\n\n\nexport default App;\nexport {Ship , Gameboard};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}